// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String? @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  taProfile     TAProfile?
  assignments   Assignment[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires   DateTime

  @@unique([identifier, token])
}

model TAProfile {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
  name   String
  email  String @unique
}

model Assignment {
  id           String      @id @default(cuid())
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  name         String
  totalPoints  Int
  promptImage  Bytes
  solutions    Solution[]
  createdAt    DateTime    @default(now())
  rubric       Json?
  rubricPoints Int?        @default(0)
  rubricValid  Boolean     @default(false)
  submissionGroups SubmissionGroup[]
}

model Solution {
  id           String     @id @default(cuid())
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String
  image        Bytes
}

model SubmissionGroup {
  id            String           @id @default(cuid())
  assignment    Assignment       @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId  String
  studentName   String
  pages         SubmissionPage[]
  createdAt     DateTime         @default(now())
  totalScore    Int?
  gradedAt      DateTime?
  feedback      Json?

  @@unique([assignmentId, studentName])
}

model SubmissionPage {
  id          String           @id @default(cuid())
  group       SubmissionGroup  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String
  image       Bytes
}
